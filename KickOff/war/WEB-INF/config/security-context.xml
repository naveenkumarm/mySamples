<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security  
       http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- This is where we configure Spring-Security -->

	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map path-type="ant">
			<security:filter-chain pattern="/css/**" filters="none" />
			<security:filter-chain pattern="/images/**" filters="none" />
			<security:filter-chain pattern="/styles/**" filters="none" />
			<security:filter-chain pattern="/scripts/**" filters="none" />
			<security:filter-chain pattern="/login.jsp*" filters="none" />
			<security:filter-chain pattern="/index.jsp*" filters="none" />
 			<security:filter-chain pattern="/login/showLogin.do" filters="none" />
			<security:filter-chain pattern="/login/myAccount.do" filters="none" />
			<security:filter-chain pattern="/login/updateMyAccount.do" filters="none" />
			<security:filter-chain pattern="/login/logout.do" filters="none" />
			<security:filter-chain pattern="/login/forgotPassword.do" filters="none" />
			<security:filter-chain pattern="/login/resetPassword.do" filters="none" />
			<security:filter-chain pattern="/datatable/**" filters="none" />
 			
			<security:filter-chain pattern="/**" filters="concurrentSessionFilter,
            		securityContextPersistenceFilter, 
			        authenticationFilter,
			        logoutFilter,
			        exceptionTranslationFilter,
			        filterSecurityInterceptor" />
		</security:filter-chain-map>
	</bean>

	<bean id="concurrentSessionFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="expiredUrl" value="/login/sessionExpired.do" />
	</bean>

	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/login/logout.do" />
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="decisionVoters">
			<list>
				<ref bean="authenticatedVoter" />
			</list>
		</property>
	</bean>

	<bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter">
	</bean>

	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
		<!-- <property name="accessDeniedHandler" ref="accessDeniedHandler"/> -->
	</bean>

	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="customAuthenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="securityMetadataSource" ref="myFilterInvocationSecurityMetadataSource" />
	</bean>
 

	<bean id="myFilterInvocationSecurityMetadataSource" class="com.epro.framework.security.MyFilterSecurityMetadataSource" />


	<!-- Custom filter to deny unwanted users even though registered -->
	<!-- <bean id="blacklistFilter" class="org.krams.tutorial.filter.BlacklistFilter" /> -->

	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter" p:authenticationManager-ref="customAuthenticationManager" p:authenticationFailureHandler-ref="customAuthenticationFailureHandler" p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />

	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same -->
	<bean id="customAuthenticationManager" class=" com.epro.framework.login.controller.CustomAuthenticationManager" />

	<!-- We just actually need to set the default failure url here -->
	<bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" p:defaultFailureUrl="/login/validateUser.do?error=true" />

	<!-- We just actually need to set the default target url here -->
	<bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler" p:defaultTargetUrl="/login/validateUser.do" />

	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page, whenever the server sends back a response requiring authentication -->
	<!-- See Spring-Security Reference 5.4.1 for more info -->
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint" p:loginFormUrl="/login/showLogin.do" />

	<security:authentication-manager />
	
 
	
</beans>